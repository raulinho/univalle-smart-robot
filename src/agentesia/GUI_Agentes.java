package agentesia;

import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.*;
import juegoPizza.PizzaGUI;
import juegoTerritorio.GUI_Territorio;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI_Agentes.java
 *
 * Created on 7/09/2010, 07:39:38 AM
 */

/**
 *
 * @author jorgeorm
 */
public class GUI_Agentes extends javax.swing.JFrame {

    private int posJugador;
    private boolean terminar;

    /** Creates new form GUI_Agentes */
    public GUI_Agentes() {
        tamanoEscX=8;
        tamanoEscY=8;
        initComponents();
        this.setVisible(true);
        jfc_selectorEscenario.setCurrentDirectory(new File("src/escenarios/"));
        this.setIgnoreRepaint(true);
        returnValJFC=0;
        jugador="";
        terminar=false;

        tablero=new int [tamanoEscX][tamanoEscY];
        int numero=64;
        for (int idy=0;idy<tamanoEscY;idy++)
        {
            for (int idx=0;idx<tamanoEscX;idx++)
            {
                tablero[idx][idy]=numero;
                if(idy%2==0)numero--;
                else numero++;
            }
            if(numero%2==0)numero=numero-7;
            else numero=numero-9;
        }
        obj_escenario.setEscenario(tablero);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfc_selectorEscenario = new javax.swing.JFileChooser();
        jp_juego = new javax.swing.JPanel();
        jmb_config = new javax.swing.JMenuBar();
        jm_juego = new javax.swing.JMenu();
        j_mItemIniciar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SnakesAndLadders");
        getContentPane().setLayout(new java.awt.FlowLayout());

        jp_juego.setPreferredSize(new Dimension(ancho,alto));
        //Creación del Canvas
        obj_escenario=new EscenarioGrafico(600,600);

        javax.swing.GroupLayout jp_juegoLayout = new javax.swing.GroupLayout(jp_juego);
        jp_juego.setLayout(jp_juegoLayout);
        jp_juegoLayout.setHorizontalGroup(
            jp_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
        jp_juegoLayout.setVerticalGroup(
            jp_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 632, Short.MAX_VALUE)
        );

        jp_juego.add("Center",obj_escenario);

        getContentPane().add(jp_juego);

        jm_juego.setText("Juego");

        j_mItemIniciar.setText("Iniciar Partida");
        j_mItemIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j_mItemIniciarActionPerformed(evt);
            }
        });
        jm_juego.add(j_mItemIniciar);

        jmb_config.add(jm_juego);

        setJMenuBar(jmb_config);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void j_mItemIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j_mItemIniciarActionPerformed
        // TODO add your handling code here:
        
       int numPC=lanzarDado();
       int numHuman=lanzarDado();
       System.out.println("num pc: "+numPC+ " numHuman: "+numHuman);

       if(numPC>numHuman)jugar(0);
       else lanzarJuego(1);
    }//GEN-LAST:event_j_mItemIniciarActionPerformed

    private int lanzarDado()
    {
        Random randonGen = new Random();
        int num=0;
        while(num==0)
        {
            num = randonGen.nextInt(6);
        }
        return num;
    }

    private Vector lanzarMinijuego(String j1, String j2)
    {
        Random randonGen = new Random();
        int num, movG=0, movP=0;
        num = randonGen.nextInt(2);
        String ganador="";
        Vector resultado = new Vector();

        switch (num)
        {
            case 0:
                GUI_Territorio obj_Territorio = new GUI_Territorio(j1);
                ganador = obj_Territorio.getGanador();
                if(ganador.equals("empate"))
                {
                    movG = -3;
                    movP = -3;
                }
                else
                {
                    movG = 0;
                    movP = -6;
                }

            break;
            
            case 1:
                PizzaGUI obj_Pizza = new PizzaGUI(j1,j2);
                ganador = obj_Pizza.getGanador();
                movG = 0;
                movP = -6;
            break;
            
            case 2:
                System.out.println("Paila ñeño");
                //obj_Precipicio = new Precipicio();
            break;
        }

        resultado.add(ganador);
        resultado.add(movG);
        resultado.add(movP);
        return resultado;


    }

    private void jugar(int juga)
    {
        System.out.println("Inicio del partida");
        System.out.println("Posicion maquina: "+tablero[obj_escenario.getPosRobotX()][obj_escenario.getPosRobotY()]+" Posicion jugador: "+tablero[obj_escenario.getPosHumanX()][obj_escenario.getPosHumanY()]);
       /* while((tablero[obj_escenario.getPosRobotX()][obj_escenario.getPosRobotY()]!=64)||(tablero[obj_escenario.getPosHumanX()][obj_escenario.getPosHumanY()]!=64))
        {*/
        if((tablero[obj_escenario.getPosRobotX()][obj_escenario.getPosRobotY()]==64)||(tablero[obj_escenario.getPosHumanX()][obj_escenario.getPosHumanY()]==64)) terminar=true;
        else
        {
            int numMov, numMovSnake_Ladder;
            String jugador;
            Vector resultado;
            int[] sNl;
        
            if(juga==0) jugador="robot";
            else jugador="humano";
            numMov = lanzarDado();
            System.out.println("Movimientos: "+numMov);

            if(jugador.equals("robot"))
            {
                obj_escenario.moverJugador(numMov, jugador);
                System.out.println("Robot se mueve a: "+ tablero[obj_escenario.getPosRobotX()][obj_escenario.getPosRobotY()]);
                obj_escenario.espera();

                //Cuando un jugador se mueve a una casilla con escalera o serpiente
                posJugador = tablero[obj_escenario.getPosRobotX()][obj_escenario.getPosRobotY()];
                sNl= obj_escenario.getSnakesNladders();

                for(int i=0; i<sNl.length; i++)
                {
                    if((i+1)==posJugador)
                    {
                        numMovSnake_Ladder = sNl[i] - posJugador;
                        obj_escenario.moverJugador(numMovSnake_Ladder, jugador);
                        obj_escenario.espera();
                    }
                }


                //Cuando un jugador se mueve a una casilla donde esta su contrincante
                if(mismaCasilla())
                {
                    System.out.println("ESTAN EN LA MISMA CASILLA");
                    terminar=true;
                    resultado = lanzarMinijuego("humano", "robot");

                    return;
                    /*if(resultado.get(0).equals("humano"))
                    {
                        obj_escenario.moverJugador((Integer)resultado.get(1), "humano");
                        obj_escenario.moverJugador((Integer)resultado.get(2), "robot");
                    }
                    else
                    {
                        obj_escenario.moverJugador((Integer)resultado.get(1), "robot");
                        obj_escenario.moverJugador((Integer)resultado.get(2), "humano");
                    }*/
                }
                jugar(1);
            }
            else
            {
                //System.out.println("antes de moverlo");
                obj_escenario.moverJugador(numMov, jugador);
                obj_escenario.espera();
                System.out.println("Jugador se mueve a: "+tablero[obj_escenario.getPosHumanX()][obj_escenario.getPosHumanY()]);

                //Cuando un jugador se mueve a una casilla con escalera o serpiente
                posJugador = tablero[obj_escenario.getPosHumanX()][obj_escenario.getPosHumanY()];
                sNl= obj_escenario.getSnakesNladders();

                for(int i=0; i<sNl.length; i++)
                {
                    if(i==posJugador)
                    {                       
                        numMovSnake_Ladder = sNl[i] - posJugador;
                        obj_escenario.moverJugador(numMovSnake_Ladder, jugador);
                        obj_escenario.espera();
                    }
                }

                jugar(0);
            }
        }
        //}
    }

    private boolean mismaCasilla()
    {
        if((obj_escenario.getPosHumanX()==obj_escenario.getPosRobotX()) && (obj_escenario.getPosHumanY()==obj_escenario.getPosRobotY()))
        {
                                        return true;
        

            }
        else {
                                        System.out.println("NO ESTAN EN LA MISMA CASILLA");
        return false;
        }
    }

    public void lanzarJuego(int primerTurno)
    {
        if(primerTurno==0)
        {
            while(!terminar)
            {
                jugar(0);
            }
        }

        else
        {
            while(!terminar)
            {
                jugar(1);
            }
        }
    }

    /*public int obtenerFila(int numero)
    {
        int pos=numero-1;
        int res=(int)pos/tamanoEscY;
        return tamanoEscY-1-res;
    }

    private void cargarEscenario()
    {
        File f_escenario = new File("src/escenarios/.default.txt");
        int []escen=new int[tamanoEscX*tamanoEscY];

        //init escenario
        for(int idx=0;idx<tamanoEscX*tamanoEscY;idx++)
            escen[idx]=0;

        try {
            Scanner sc = new Scanner(f_escenario);
            int num;
            int orig=0;
            int desti=0;
            int fila;

            while(sc.hasNextInt())
            {
                //saco la cantidad de "escaleras o serpeintes" a leer
                num=sc.nextInt();
                while(num>0)
                {
                    orig=sc.nextInt();
                    desti=sc.nextInt();
                    fila=obtenerFila(orig);
                    //busco el origen de la escalera o la serpiente
                    
                    escen[orig-1]=desti-1;
                    
                    num--;
                }

            }

        } catch (FileNotFoundException ex) {
                Logger.getLogger(GUI_Agentes.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Del primer proy
        obj_escenario.limpiarBuffer();
        obj_escenario.paintEscenario(escen);
        obj_escenario.setPosRobot(cordxI, cordyI);
        obj_escenario.pintarRobot();
        
        
     }

    private void cargarEscenario(File f_escenario)
    {

        int []escen=new int[tamanoEscX*tamanoEscY];

        //init escenario
        for(int idx=0;idx<tamanoEscX*tamanoEscY;idx++)
            escen[idx]=0;


        int contN=0,contI=0,cordXf=0,cordYf=0;

        try {
            Scanner sc = new Scanner(f_escenario);
            int num;
            int orig=0;
            int desti=0;
            int fila;

            while(sc.hasNextInt())
            {
                //saco la cantidad de "escaleras o serpeintes" a leer
                num=sc.nextInt();
                while(num>0)
                {
                    orig=sc.nextInt();
                    desti=sc.nextInt();
                    fila=obtenerFila(orig);
                    //busco el origen de la escalera o la serpiente

                    escen[orig-1]=desti-1;

                    num--;
                }

            }

        } catch (FileNotFoundException ex) {
                Logger.getLogger(GUI_Agentes.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Del primer proy
        obj_escenario.limpiarBuffer();
        obj_escenario.paintEscenario(escen);
        obj_escenario.setPosRobot(cordxI, cordyI);
        obj_escenario.pintarRobot();
        
        obj_escenario.setEscenario(tablero);
      }

  private void mostrarResultado(NodoEstado respuesta, String algoritmo, int nodos, long tiempo)
    {
        if(respuesta==null) JOptionPane.showMessageDialog(this, "No se encontró respuesta con "+algoritmo,"Respuesta",JOptionPane.ERROR_MESSAGE);
        else
        {
            obj_escenario.mostrarRuta(respuesta, cordxI, cordyI);
            JOptionPane.showMessageDialog(this, "Se encontró respuesta con "+algoritmo+"\n"
            + "Ruta: "+respuesta.getRuta()+"("+respuesta.getX()+","+respuesta.getY()+")\n"
            + "Profundidad: "+respuesta.getProfundidadPorOps()+"\n"
            + "Nodos expandidos: "+nodos+"\n"
            + "Tiempo: "+tiempo+" ms\n"
            + "Costo: "+respuesta.getCosto(),"Resultado",JOptionPane.INFORMATION_MESSAGE);

            factoria=null;
        }

    }*/

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Agentes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem j_mItemIniciar;
    private javax.swing.JFileChooser jfc_selectorEscenario;
    private javax.swing.JMenu jm_juego;
    private javax.swing.JMenuBar jmb_config;
    private javax.swing.JPanel jp_juego;
    // End of variables declaration//GEN-END:variables
    private int returnValJFC;
    private EscenarioGrafico obj_escenario;
    public static final int ancho=601;
    public static final int alto=601;
    private int tamanoEscX, tamanoEscY;
    private int [][] tablero;
    private String jugador;
    //private Territorio obj_territorio;
    private PizzaGUI obj_pizza;
    //private Precipicio obj_precipicio;
}
